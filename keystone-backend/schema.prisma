// This is your Prisma schema file.
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

// Defines the database connection and provider.
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Defines the Prisma Client generator.
generator client {
  provider = "prisma-client-js"
}

// --- ENUM Definitions ---
enum CategoryRole {
  SUBMITTER
  REVIEWER
  ADMIN
}

enum GuestPermission {
  SUBMIT_ONLY
  REVIEW_ONLY
}

enum ExpenseStatus {
  PENDING_REVIEW
  PENDING_ADMIN
  APPROVED
  DENIED
  REIMBURSED
}

/// Platform of a notification endpoint
enum PushPlatform {
  ios
  android
  web
}

/// Provider/service used for push delivery
enum PushProvider {
  expo
  fcm
  apns
  webpush
}

/// Notification event keys for preferences
enum NotificationEvent {
  expense_created
  expense_approved
  expense_denied
  category_shared
  mention
  weekly_summary
}

// --- Model Definitions ---
model User {
  id           Int      @id @default(autoincrement())
  firebase_uid String   @unique
  email        String   @unique
  name         String?
  avatar_url   String?
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  owned_reports        Report[]             @relation("ReportOwner")
  submitted_expenses   Expense[]            @relation("ExpenseSubmitter")
  approvals            Approval[]
  category_permissions CategoryPermission[]
  notification_endpoints NotificationEndpoint[]
  notification_preferences NotificationPreference[]

  @@map("users") // Explicitly map this model to the 'users' table
}

model Report {
  id        Int      @id @default(autoincrement())
  name      String
  owner_id  Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  owner      User       @relation("ReportOwner", fields: [owner_id], references: [id], onDelete: Cascade)
  categories Category[]
  expenses   Expense[]

  @@map("reports")
}

model Category {
  id                   Int      @id @default(autoincrement())
  name                 String
  budget               Decimal? @default(0.00)
  report_id            Int
  parent_category_id   Int?
  require_receipt      Boolean  @default(false)
  allow_guest_submissions Boolean @default(true)
  allow_user_submissions  Boolean @default(true)
  createdAt            DateTime @default(now()) @map("created_at")
  updatedAt            DateTime @updatedAt @map("updated_at")

  // Relations
  report           Report               @relation(fields: [report_id], references: [id], onDelete: Cascade)
  parent_category  Category?            @relation("CategoryNesting", fields: [parent_category_id], references: [id], onDelete: Cascade)
  child_categories Category[]           @relation("CategoryNesting")
  expenses         Expense[]
  guest_tokens     GuestToken[]
  permissions      CategoryPermission[]

  // Indexes for faster ancestor lookups and workspace-scoped queries
  @@index([parent_category_id])
  @@index([report_id])

  @@map("categories")
}

model Expense {
  id               Int           @id @default(autoincrement())
  description      String
  amount           Decimal
  status           ExpenseStatus @default(PENDING_REVIEW)
  receipt_url      String?
  items            Json?
  notes            String?
  transaction_date DateTime      @default(now())
  report_id        Int
  submitter_id     Int?
  category_id      Int?
  guest_name       String?       @db.VarChar(255)
  guest_email      String?       @db.VarChar(255)
  createdAt        DateTime      @default(now()) @map("created_at")
  updatedAt        DateTime      @updatedAt @map("updated_at")

  // Relations
  report    Report     @relation(fields: [report_id], references: [id], onDelete: Cascade)
  submitter User?       @relation("ExpenseSubmitter", fields: [submitter_id], references: [id], onDelete: SetNull)
  category  Category?  @relation(fields: [category_id], references: [id], onDelete: SetNull)
  approvals Approval[]

  @@map("expenses")
}

model Approval {
  id            Int           @id @default(autoincrement())
  status_change ExpenseStatus
  notes         String?
  expense_id    Int
  user_id       Int?
  createdAt     DateTime      @default(now()) @map("created_at")

  // Relations
  expense Expense @relation(fields: [expense_id], references: [id], onDelete: Cascade)
  user    User?    @relation(fields: [user_id], references: [id], onDelete: SetNull)

  @@map("approvals")
}

model CategoryPermission {
  id          Int          @id @default(autoincrement())
  role        CategoryRole
  category_id Int
  user_id     Int
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")

  // Relations
  category Category @relation(fields: [category_id], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  // Indexes for fast fan-out by category and role, and optional reverse lookups by user
  @@index([category_id, role])
  @@index([user_id])

  @@unique([category_id, user_id])
  @@map("category_permissions")
}

model GuestToken {
  id               Int             @id @default(autoincrement())
  token            String          @unique
  permission_level GuestPermission
  expires_at       DateTime?
  description     String?
  status          String         @default("active")
  category_id      Int
  createdAt        DateTime        @default(now()) @map("created_at")

  // Relations
  category Category @relation(fields: [category_id], references: [id], onDelete: Cascade)

  @@map("guest_tokens")
}

/// Stores device/browser endpoints for delivering push notifications
model NotificationEndpoint {
  id            Int           @id @default(autoincrement())
  user_id       Int
  platform      PushPlatform
  provider      PushProvider   @default(expo)
  token         String         // Expo push token or device token. For web, this can be an identifier.
  subscription  Json?          // Web Push subscription JSON or provider-specific metadata
  app           String?        // 'expo' or other app identifier
  locale        String?        // Optional: user/device locale
  lastSeenAt    DateTime?      @map("last_seen_at")
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")

  // Relations
  user          User           @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([provider, token])
  @@index([user_id])
  @@map("notification_endpoints")
}

/// Per-user notification preferences per event/channel
model NotificationPreference {
  id        Int                 @id @default(autoincrement())
  user_id   Int
  event     NotificationEvent
  push      Boolean             @default(true)
  email     Boolean             @default(false)
  createdAt DateTime            @default(now()) @map("created_at")
  updatedAt DateTime            @updatedAt @map("updated_at")

  // Relations
  user      User                @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, event])
  @@index([user_id])
  @@map("notification_preferences")
}
